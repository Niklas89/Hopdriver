-- MySQL Script generated by MySQL Workbench
-- 02/29/16 18:44:45
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering



-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema choosedriver
-- -----------------------------------------------------

SET default_storage_engine=InnoDB ;

ALTER SCHEMA `choosedriver` character set utf8 ;





-- -----------------------------------------------------
-- Table `admin`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `admin` (
  `admin_id` INT NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(60) NOT NULL,
  `email` VARCHAR(255) NOT NULL,
  `pass` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`admin_id`))



-- -----------------------------------------------------
-- Table `client`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `client` (
  `client_id` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(60) NOT NULL,
  `pass` VARCHAR(32) NOT NULL,
  `date_inscription` DATETIME NOT NULL,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(60) NOT NULL,
  `phone` VARCHAR(30) NOT NULL,
  `address` VARCHAR(255) NOT NULL,
  `company` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`client_id`))



-- -----------------------------------------------------
-- Table `driver`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `driver` (
  `driver_id` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(60) NOT NULL,
  `pass` VARCHAR(32) NOT NULL,
  `date_inscription` DATETIME NOT NULL,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(60) NOT NULL,
  `phone` VARCHAR(30) NOT NULL,
  `phonetwo` VARCHAR(30) NOT NULL,
  `address` VARCHAR(255) NOT NULL,
  `company` VARCHAR(45) NOT NULL,
  `gender` VARCHAR(1) NOT NULL,
  PRIMARY KEY (`driver_id`))



-- -----------------------------------------------------
-- Table `commission_payment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `commission_payment` (
  `commission_payment_id` INT NOT NULL AUTO_INCREMENT,
  `commission_payment_rate` TINYINT NOT NULL,
  PRIMARY KEY (`commission_payment_id`))



-- -----------------------------------------------------
-- Table `disposal_booking`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `disposal_booking` (
  `id_disposal_booking` INT NOT NULL AUTO_INCREMENT,
  `coldate` DATETIME NOT NULL,
  `service` VARCHAR(50) NOT NULL,
  `pickupdate` DATE NOT NULL,
  `pickuptime` TIME NOT NULL,
  `pick_up_loc` VARCHAR(255) NOT NULL,
  `drop_off_loc` VARCHAR(255) NOT NULL,
  `flight_prefix` VARCHAR(4) NOT NULL,
  `flight_number` TINYINT NOT NULL,
  `price` TINYINT NOT NULL,
  `hoursday` TINYINT NOT NULL,
  `nb_days` TINYINT NOT NULL,
  `comments` MEDIUMTEXT NOT NULL,
  `accepted` TINYINT(1) NOT NULL,
  `vehicle` VARCHAR(100) NOT NULL,
  `payment_online` TINYINT(1) NOT NULL,
  `driver_id` INT NOT NULL,
  `client_id` INT NOT NULL,
  `commission_payment_id` INT NOT NULL,
  PRIMARY KEY (`client_id`, `id_disposal_booking`),
  INDEX `fk_disposal_booking_driver1_idx` (`driver_id` ASC),
  UNIQUE INDEX `id_disposal_booking_UNIQUE` (`id_disposal_booking` ASC),
  INDEX `fk_disposal_booking_commission_payment1_idx` (`commission_payment_id` ASC),
  CONSTRAINT `fk_disposal_booking_driver1`
    FOREIGN KEY (`driver_id`)
    REFERENCES `driver` (`driver_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_disposal_booking_client1`
    FOREIGN KEY (`client_id`)
    REFERENCES `client` (`client_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_disposal_booking_commission_payment1`
    FOREIGN KEY (`commission_payment_id`)
    REFERENCES `commission_payment` (`commission_payment_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `driver_payment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `driver_payment` (
  `id_payment_onboard` INT(11) NOT NULL AUTO_INCREMENT,
  `driver_id` INT NOT NULL,
  `card_onboard` TINYINT(1) NOT NULL,
  `vat_rate` TINYINT(2) NOT NULL,
  PRIMARY KEY (`driver_id`, `id_payment_onboard`),
  UNIQUE INDEX `id_payment_onboard_UNIQUE` (`id_payment_onboard` ASC),
  CONSTRAINT `fk_driver_payment_driver1`
    FOREIGN KEY (`driver_id`)
    REFERENCES `driver` (`driver_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `transfer_booking`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `transfer_booking` (
  `id_transfer_booking` INT NOT NULL AUTO_INCREMENT,
  `coldate` DATETIME NOT NULL,
  `service` VARCHAR(50) NOT NULL,
  `pickupdate` DATE NOT NULL,
  `pickuptime` TIME NOT NULL,
  `returndate` DATE NOT NULL,
  `returntime` TIME NOT NULL,
  `origin` VARCHAR(255) NOT NULL,
  `destination` VARCHAR(255) NOT NULL,
  `flight_prefix` VARCHAR(4) NOT NULL,
  `flight_number` TINYINT NOT NULL,
  `price` TINYINT NOT NULL,
  `comments` MEDIUMTEXT NOT NULL,
  `accepted` TINYINT(1) NOT NULL,
  `vehicle` VARCHAR(100) NOT NULL,
  `payment_online` TINYINT(1) NOT NULL,
  `client_id` INT NOT NULL,
  `driver_id` INT NOT NULL,
  `commission_payment_id` INT NOT NULL,
  PRIMARY KEY (`client_id`, `id_transfer_booking`),
  INDEX `fk_transfer_booking_driver1_idx` (`driver_id` ASC),
  UNIQUE INDEX `id_transfer_booking_UNIQUE` (`id_transfer_booking` ASC),
  INDEX `fk_transfer_booking_commission_payment1_idx` (`commission_payment_id` ASC),
  CONSTRAINT `fk_transfer_booking_client1`
    FOREIGN KEY (`client_id`)
    REFERENCES `client` (`client_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_transfer_booking_driver1`
    FOREIGN KEY (`driver_id`)
    REFERENCES `driver` (`driver_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_transfer_booking_commission_payment1`
    FOREIGN KEY (`commission_payment_id`)
    REFERENCES `commission_payment` (`commission_payment_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `category`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `category` (
  `category_id` INT NOT NULL AUTO_INCREMENT,
  `category_name` VARCHAR(45) NOT NULL,
  `category_description` TINYTEXT NOT NULL,
  PRIMARY KEY (`category_id`))



-- -----------------------------------------------------
-- Table `price`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `price` (
  `price_id` INT NOT NULL AUTO_INCREMENT,
  `category_id` INT NOT NULL,
  `price_km` DECIMAL(4,2) NOT NULL,
  `price_minimum` TINYINT NOT NULL,
  `price_disposal` TINYINT NOT NULL,
  PRIMARY KEY (`category_id`, `price_id`),
  UNIQUE INDEX `price_ak` (`price_id` ASC),
  CONSTRAINT `fk_price_category1`
    FOREIGN KEY (`category_id`)
    REFERENCES `category` (`category_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `driver_category`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `driver_category` (
  `driver_id` INT NOT NULL,
  `category_id` INT NOT NULL,
  PRIMARY KEY (`driver_id`, `category_id`),
  INDEX `fk_driver_has_category_category1_idx` (`category_id` ASC),
  CONSTRAINT `fk_driver_has_category_driver1`
    FOREIGN KEY (`driver_id`)
    REFERENCES `driver` (`driver_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_driver_has_category_category1`
    FOREIGN KEY (`category_id`)
    REFERENCES `category` (`category_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `driver_price`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `driver_price` (
  `price_id` INT NOT NULL,
  `driver_id` INT NOT NULL,
  `category_id` INT NOT NULL,
  PRIMARY KEY (`driver_id`, `category_id`, `price_id`),
  INDEX `fk_driver_price_driver_price1_idx` (`price_id` ASC),
  CONSTRAINT `fk_driver_price_price1`
    FOREIGN KEY (`price_id`)
    REFERENCES `price` (`price_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_driver_price_driver_category1`
    FOREIGN KEY (`driver_id` , `category_id`)
    REFERENCES `driver_category` (`driver_id` , `category_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `type_place`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `type_place` (
  `type_place_id` INT NOT NULL AUTO_INCREMENT,
  `type_place_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`type_place_id`))



-- -----------------------------------------------------
-- Table `place`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `place` (
  `place_id` INT NOT NULL AUTO_INCREMENT,
  `place_name` VARCHAR(45) NOT NULL,
  `type_place_id` INT NOT NULL,
  PRIMARY KEY (`place_id`),
  INDEX `fk_place_type_place1_idx` (`type_place_id` ASC),
  CONSTRAINT `fk_place_type_place1`
    FOREIGN KEY (`type_place_id`)
    REFERENCES `type_place` (`type_place_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `price_place`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `price_place` (
  `place_id` INT NOT NULL,
  `category_id` INT NOT NULL,
  `price_id` INT NOT NULL,
  PRIMARY KEY (`place_id`, `category_id`, `price_id`),
  INDEX `fk_price_place_category_price_idx` (`category_id` ASC, `price_id` ASC),
  CONSTRAINT `fk_price_place_price1`
    FOREIGN KEY (`category_id` , `price_id`)
    REFERENCES `price` (`category_id` , `price_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_price_place_place1`
    FOREIGN KEY (`place_id`)
    REFERENCES `place` (`place_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `region_departement`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `region_departement` (
  `region_dept_id` INT NOT NULL,
  `longitude` DECIMAL(12,9) NOT NULL,
  `latitude` DECIMAL(12,9) NOT NULL,
  PRIMARY KEY (`region_dept_id`),
  INDEX `fk_region_departement_place1_idx` (`region_dept_id` ASC),
  CONSTRAINT `fk_region_departement_place1`
    FOREIGN KEY (`region_dept_id`)
    REFERENCES `place` (`place_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `city`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `city` (
  `city_id` INT NOT NULL,
  `longitude` DECIMAL(12,9) NOT NULL,
  `latitude` DECIMAL(12,9) NOT NULL,
  `postal_code` VARCHAR(8) NOT NULL,
  `region_dept_id` INT NOT NULL,
  INDEX `fk_city_region_departement1_idx` (`region_dept_id` ASC),
  PRIMARY KEY (`city_id`),
  CONSTRAINT `fk_city_region_departement1`
    FOREIGN KEY (`region_dept_id`)
    REFERENCES `region_departement` (`region_dept_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_city_place1`
    FOREIGN KEY (`city_id`)
    REFERENCES `place` (`place_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `country`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `country` (
  `country_id` INT NOT NULL,
  `country_code` INT NOT NULL,
  PRIMARY KEY (`country_id`),
  CONSTRAINT `fk_country_place1`
    FOREIGN KEY (`country_id`)
    REFERENCES `place` (`place_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `region`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `region` (
  `region_id` INT NOT NULL,
  `country_id` INT NOT NULL,
  PRIMARY KEY (`region_id`),
  INDEX `fk_region_country1_idx` (`country_id` ASC),
  CONSTRAINT `fk_region_region_departement1`
    FOREIGN KEY (`region_id`)
    REFERENCES `region_departement` (`region_dept_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_region_country1`
    FOREIGN KEY (`country_id`)
    REFERENCES `country` (`country_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `departement`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `departement` (
  `dept_id` INT NOT NULL,
  `region_id` INT NOT NULL,
  PRIMARY KEY (`dept_id`),
  INDEX `fk_departement_region1_idx` (`region_id` ASC),
  CONSTRAINT `fk_departement_region_departement1`
    FOREIGN KEY (`dept_id`)
    REFERENCES `region_departement` (`region_dept_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_departement_region1`
    FOREIGN KEY (`region_id`)
    REFERENCES `region` (`region_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)


-- -----------------------------------------------------
-- Table `driver_vehicle_category`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `driver_vehicle_category` (
  `driver_vehicle_category_id` INT NOT NULL AUTO_INCREMENT,
  `driver_id` INT NOT NULL,
  `category_id` INT NOT NULL,
  `brand` VARCHAR(45) NOT NULL,
  `model` VARCHAR(45) NOT NULL,
  `capacity` TINYINT(2) NOT NULL,
  `seats` TINYINT(2) NOT NULL,
  PRIMARY KEY (`driver_vehicle_category_id`),
  INDEX `fk_driver_vehicle_category_driver_category1_idx` (`driver_id` ASC, `category_id` ASC),
  CONSTRAINT `fk_driver_vehicle_category_driver_category1`
    FOREIGN KEY (`driver_id` , `category_id`)
    REFERENCES `driver_category` (`driver_id` , `category_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `category_characteristics`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `category_characteristics` (
  `category_characteristics_id` INT NOT NULL AUTO_INCREMENT,
  `category_characteristics_name` VARCHAR(45) NOT NULL,
  `category_characteristics_icone` VARCHAR(100) NOT NULL,
  `category_id` INT NOT NULL,
  PRIMARY KEY (`category_id`, `category_characteristics_id`),
  UNIQUE INDEX `category_characteristics_ak` (`category_characteristics_id` ASC),
  CONSTRAINT `fk_category_characteristics_category1`
    FOREIGN KEY (`category_id`)
    REFERENCES `category` (`category_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `language`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `language` (
  `language_id` INT NOT NULL AUTO_INCREMENT,
  `language_name_vo` VARCHAR(25) NOT NULL,
  PRIMARY KEY (`language_id`))



-- -----------------------------------------------------
-- Table `level`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `level` (
  `level_id` INT NOT NULL AUTO_INCREMENT,
  `level_value` TINYINT NOT NULL,
  PRIMARY KEY (`level_id`))



-- -----------------------------------------------------
-- Table `driver_language`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `driver_language` (
  `level_id` INT NOT NULL,
  `driver_id` INT NOT NULL,
  `language_id` INT NOT NULL,
  PRIMARY KEY (`driver_id`, `language_id`),
  INDEX `fk_driver_language_level1_idx` (`level_id` ASC),
  INDEX `fk_driver_language_language1_idx` (`language_id` ASC),
  CONSTRAINT `fk_driver_language_level1`
    FOREIGN KEY (`level_id`)
    REFERENCES `level` (`level_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_driver_language_driver1`
    FOREIGN KEY (`driver_id`)
    REFERENCES `driver` (`driver_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_driver_language_language1`
    FOREIGN KEY (`language_id`)
    REFERENCES `language` (`language_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `promo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `promo` (
  `promo_id` INT NOT NULL AUTO_INCREMENT,
  `promo_code` VARCHAR(10) NOT NULL,
  `promo_discount_rate` DECIMAL(5,2) NOT NULL,
  PRIMARY KEY (`promo_id`),
  UNIQUE INDEX `promo_code_UNIQUE` (`promo_code` ASC))



-- -----------------------------------------------------
-- Table `client_promo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `client_promo` (
  `promo_id` INT NOT NULL,
  `client_id` INT NOT NULL,
  PRIMARY KEY (`client_id`, `promo_id`),
  INDEX `fk_client_promo_promo1_idx` (`promo_id` ASC),
  CONSTRAINT `fk_client_promo_promo1`
    FOREIGN KEY (`promo_id`)
    REFERENCES `promo` (`promo_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_client_promo_client1`
    FOREIGN KEY (`client_id`)
    REFERENCES `client` (`client_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `traduction`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `traduction` (
  `traduction_id` INT NOT NULL AUTO_INCREMENT,
  `language_id` INT NOT NULL,
  `language_code` VARCHAR(3) NOT NULL,
  `language_name` VARCHAR(25) NOT NULL,
  PRIMARY KEY (`language_id`, `traduction_id`),
  UNIQUE INDEX `traduction_ak` (`traduction_id` ASC),
  CONSTRAINT `fk_traduction_language1`
    FOREIGN KEY (`language_id`)
    REFERENCES `language` (`language_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `vote`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vote` (
  `vote_id` INT NOT NULL AUTO_INCREMENT,
  `driver_id` INT NOT NULL,
  `client_id` INT NOT NULL,
  `vote_value` TINYINT(1) NOT NULL,
  `vote_comment` MEDIUMTEXT NOT NULL,
  `vote_date` DATETIME NOT NULL,
  PRIMARY KEY (`vote_id`),
  INDEX `fk_vote_driver1_idx` (`driver_id` ASC),
  INDEX `fk_vote_client1_idx` (`client_id` ASC),
  CONSTRAINT `fk_vote_driver1`
    FOREIGN KEY (`driver_id`)
    REFERENCES `driver` (`driver_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_vote_client1`
    FOREIGN KEY (`client_id`)
    REFERENCES `client` (`client_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `driver_photo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `driver_photo` (
  `driver_photo_id` INT NOT NULL AUTO_INCREMENT,
  `up_filename` VARCHAR(19) NOT NULL,
  `up_filesize` INT(10) NOT NULL,
  `up_filedate` DATETIME NOT NULL,
  `driver_id` INT NOT NULL,
  PRIMARY KEY (`driver_id`, `driver_photo_id`),
  UNIQUE INDEX `photo_id_UNIQUE` (`driver_photo_id` ASC),
  CONSTRAINT `fk_user_photo_driver1`
    FOREIGN KEY (`driver_id`)
    REFERENCES `driver` (`driver_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `driver_license_name`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `driver_license_name` (
  `driver_license_name_id` INT NOT NULL AUTO_INCREMENT,
  `driver_license_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`driver_license_name_id`))



-- -----------------------------------------------------
-- Table `driver_license`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `driver_license` (
  `driver_license_id` INT NOT NULL AUTO_INCREMENT,
  `up_filename` VARCHAR(19) NOT NULL,
  `up_filesize` INT(10) NOT NULL,
  `up_filedate` DATETIME NOT NULL,
  `driver_license_name_id` INT NOT NULL,
  `driver_id` INT NOT NULL,
  PRIMARY KEY (`driver_id`, `driver_license_id`),
  UNIQUE INDEX `driver_license_id_UNIQUE` (`driver_license_id` ASC),
  INDEX `fk_driver_license_driver_license_name1_idx` (`driver_license_name_id` ASC),
  CONSTRAINT `fk_driver_license_driver_license_name1`
    FOREIGN KEY (`driver_license_name_id`)
    REFERENCES `driver_license_name` (`driver_license_name_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_driver_license_driver1`
    FOREIGN KEY (`driver_id`)
    REFERENCES `driver` (`driver_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `client_photo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `client_photo` (
  `client_photo_id` INT NOT NULL AUTO_INCREMENT,
  `up_filename` VARCHAR(19) NOT NULL,
  `up_filesize` INT(10) NOT NULL,
  `up_filedate` DATETIME NOT NULL,
  `client_id` INT NOT NULL,
  PRIMARY KEY (`client_id`, `client_photo_id`),
  UNIQUE INDEX `photo_id_UNIQUE` (`client_photo_id` ASC),
  CONSTRAINT `fk_client_photo_client1`
    FOREIGN KEY (`client_id`)
    REFERENCES `client` (`client_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `client_promo_disposal_booking`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `client_promo_disposal_booking` (
  `client_id` INT NOT NULL,
  `promo_id` INT NOT NULL,
  `id_disposal_booking` INT NOT NULL,
  PRIMARY KEY (`client_id`, `promo_id`),
  INDEX `fk_client_promo_disposal_booking_disposal_booking1_idx` (`client_id` ASC, `id_disposal_booking` ASC),
  CONSTRAINT `fk_client_promo_disposal_booking_client_promo1`
    FOREIGN KEY (`client_id` , `promo_id`)
    REFERENCES `client_promo` (`client_id` , `promo_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_client_promo_disposal_booking_disposal_booking1`
    FOREIGN KEY (`client_id` , `id_disposal_booking`)
    REFERENCES `disposal_booking` (`client_id` , `id_disposal_booking`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `client_promo_transfer_booking`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `client_promo_transfer_booking` (
  `client_id` INT NOT NULL,
  `promo_id` INT NOT NULL,
  `id_transfer_booking` INT NOT NULL,
  PRIMARY KEY (`client_id`, `promo_id`),
  INDEX `fk_client_promo_transfer_booking_transfer_booking_idx` (`client_id` ASC, `id_transfer_booking` ASC),
  CONSTRAINT `fk_client_promo_transfer_booking_client_promo1`
    FOREIGN KEY (`client_id` , `promo_id`)
    REFERENCES `client_promo` (`client_id` , `promo_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_client_promo_transfer_booking_transfer_booking`
    FOREIGN KEY (`client_id` , `id_transfer_booking`)
    REFERENCES `transfer_booking` (`client_id` , `id_transfer_booking`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `driver_price_fixed`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `driver_price_fixed` (
  `driver_id` INT NOT NULL,
  `category_id` INT NOT NULL,
  `origin_id` INT NOT NULL,
  `destination_id` INT NOT NULL,
  `price_fixed` TINYINT NOT NULL,
  PRIMARY KEY (`driver_id`, `category_id`, `origin_id`, `destination_id`),
  INDEX `fk_driver_has_place_place1_idx` (`origin_id` ASC),
  INDEX `fk_driver_price_fixed_place1_idx` (`destination_id` ASC),
  CONSTRAINT `fk_driver_has_place_place1`
    FOREIGN KEY (`origin_id`)
    REFERENCES `place` (`place_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_driver_price_fixed_place1`
    FOREIGN KEY (`destination_id`)
    REFERENCES `place` (`place_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_driver_price_fixed_driver_category1`
    FOREIGN KEY (`driver_id` , `category_id`)
    REFERENCES `driver_category` (`driver_id` , `category_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `newpassword`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `newpassword` (
  `newpassword_id` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(60) NOT NULL,
  `forgotkey` VARCHAR(8) NOT NULL,
  PRIMARY KEY (`newpassword_id`))



-- -----------------------------------------------------
-- Table `email_sending`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `email_sending` (
  `email_sending_id` INT NOT NULL AUTO_INCREMENT,
  `email_sending_driver` VARCHAR(60) NOT NULL,
  `email_sending_booking` VARCHAR(60) NOT NULL,
  `email_sending_contact` VARCHAR(60) NOT NULL,
  `email_sending_noreply` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`email_sending_id`))



-- -----------------------------------------------------
-- Table `category_translated`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `category_translated` (
  `category_translated_id` INT NOT NULL AUTO_INCREMENT,
  `category_id` INT NOT NULL,
  `category_translated_name` VARCHAR(45) NOT NULL,
  `category_translated_description` MEDIUMTEXT NOT NULL,
  PRIMARY KEY (`category_id`, `category_translated_id`),
  UNIQUE INDEX `idcategory_translated_id_UNIQUE` (`category_translated_id` ASC),
  CONSTRAINT `fk_category_translated_category1`
    FOREIGN KEY (`category_id`)
    REFERENCES `category` (`category_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)



-- -----------------------------------------------------
-- Table `driver_description`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `driver_description` (
  `driver_id` INT NOT NULL,
  `description` LONGTEXT NOT NULL,
  PRIMARY KEY (`driver_id`),
  CONSTRAINT `fk_driver_description_driver1`
    FOREIGN KEY (`driver_id`)
    REFERENCES `driver` (`driver_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)







DELIMITER $$
CREATE DEFINER = CURRENT_USER TRIGGER `choosedriver`.`region_departement_AFTER_INSERT` AFTER INSERT ON `region_departement` FOR EACH ROW
BEGIN
        IF new.region_dept_id IN (SELECT country_id 
                                  FROM   country
                                  WHERE  country_id = new.region_dept_id) THEN
            SET @erreur = CONCAT('region_dept_id = ', new.region_dept_id, ' : code déjà utilisée pour un pays !') ;
            SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = @erreur ;
        END IF ;
        IF new.region_dept_id IN (SELECT city_id 
                                  FROM    city
                                  WHERE   city_id = new.region_dept_id) THEN
            SET @erreur = CONCAT('region_dept_id = ', new.region_dept_id, ' : code déjà utilisée pour une ville !') ;
            SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = @erreur ;
        END IF ;

END
$$

CREATE DEFINER = CURRENT_USER TRIGGER `choosedriver`.`city_AFTER_INSERT` AFTER INSERT ON `city` FOR EACH ROW
BEGIN
        IF new.city_id IN (SELECT country_id 
                                  FROM   country
                                  WHERE  country_id = new.city_id) THEN
            SET @erreur = CONCAT('city_id = ', new.city_id, ' : code déjà utilisée pour un pays !') ;
            SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = @erreur ;
        END IF ;
        IF new.city_id IN (SELECT region_dept_id 
                           FROM   region_departement
                           WHERE  region_dept_id = new.city_id) THEN
            SET @erreur = CONCAT('city_id = ', new.city_id, ' : code déjà utilisée pour une region (ou un département) !') ;
            SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = @erreur ;
        END IF ;
        IF new.city_id NOT IN (SELECT x.place_id 
                               FROM   place as x JOIN type_place as y ON x.type_place_id = y.type_place_id 
                               WHERE  y.type_place_name = 'city') THEN
            SET @erreur = CONCAT('city_id = ', new.city_id, ' : type de place <> ''city'' !') ;
            SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = @erreur ;
        END IF ;

END
$$

CREATE DEFINER = CURRENT_USER TRIGGER `choosedriver`.`country_AFTER_INSERT` AFTER INSERT ON `country` FOR EACH ROW
BEGIN
        IF new.country_id IN (SELECT region_dept_id 
                             FROM    region_departement
                             WHERE   region_dept_id = new.country_id) THEN
            SET @erreur = CONCAT('country_id = ', new.country_id, ' : code déjà utilisée pour une région (ou un département) !') ;
            SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = @erreur ;
        END IF ;
        IF new.country_id IN (SELECT city_id 
                             FROM city
                             WHERE city_id = new.country_id) THEN
            SET @erreur = CONCAT('country_id = ', new.country_id, ' : code déjà utilisée pour une ville !') ;
            SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = @erreur ;
        END IF ;
        IF new.country_id NOT IN (SELECT x.place_id 
                               FROM   place as x JOIN type_place as y ON x.type_place_id = y.type_place_id 
                               WHERE  y.type_place_name = 'country') THEN
            SET @erreur = CONCAT('country_id = ', new.country_id, ' : type de place <> ''country'' !') ;
            SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = @erreur ;
        END IF ;

END
$$

CREATE DEFINER = CURRENT_USER TRIGGER `choosedriver`.`region_AFTER_INSERT` AFTER INSERT ON `region` FOR EACH ROW
BEGIN
        IF new.region_id NOT IN (SELECT x.place_id 
                                 FROM   place as x JOIN type_place as y ON x.type_place_id = y.type_place_id 
                                 WHERE  y.type_place_name = 'region') THEN
            SET @erreur = CONCAT('region_id = ', new.region_id, ' : type de place <> ''region'' !') ;
            SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = @erreur ;
        END IF ;

END
$$

CREATE DEFINER = CURRENT_USER TRIGGER `choosedriver`.`departement_AFTER_INSERT` AFTER INSERT ON `departement` FOR EACH ROW
BEGIN
        IF new.dept_id NOT IN (SELECT x.place_id 
                               FROM   place as x JOIN type_place as y ON x.type_place_id = y.type_place_id 
                               WHERE  y.type_place_name = 'departement') THEN
            SET @erreur = CONCAT('dept_id = ', new.region_id, ' : type de place <> ''departement'' !') ;
            SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = @erreur ;
        END IF ;

END
$$

CREATE DEFINER = CURRENT_USER TRIGGER `choosedriver`.`client_promo_disposal_booking_AFTER_INSERT` AFTER INSERT ON `client_promo_disposal_booking` FOR EACH ROW
BEGIN
        IF new.client_id IN (SELECT client_id 
                             FROM CLIENT_PROMO_TRANSFER_BOOKING
                             WHERE client_id = new.client_id AND promo_id = new.promo_id) THEN
            SET @erreur = CONCAT('client_id = ', new.client_id, ' ; promo_id = ', new.promo_id, ' : promo déjà utilisée pour réservation du client !') ;
            SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = @erreur ;
        END IF ;

END
$$

CREATE DEFINER = CURRENT_USER TRIGGER `choosedriver`.`client_promo_transfer_booking_AFTER_INSERT` AFTER INSERT ON `client_promo_transfer_booking` FOR EACH ROW
BEGIN
        IF new.client_id IN (SELECT client_id 
                             FROM CLIENT_PROMO_DISPOSAL_BOOKING
                             WHERE client_id = new.client_id AND promo_id = new.promo_id) THEN
            SET @erreur = CONCAT('client_id = ', new.client_id, ' ; promo_id = ', new.promo_id, ' : promo déjà utilisée pour une mise à disposition du client !') ;
            SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = @erreur ;
        END IF ;

END
$$


DELIMITER ;



-- -----------------------------------------------------
-- Data for table `type_place`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO `type_place` (`type_place_id`, `type_place_name`) VALUES (1, 'country');
INSERT INTO `type_place` (`type_place_id`, `type_place_name`) VALUES (2, 'region');
INSERT INTO `type_place` (`type_place_id`, `type_place_name`) VALUES (3, 'departement');
INSERT INTO `type_place` (`type_place_id`, `type_place_name`) VALUES (4, 'city');

COMMIT;